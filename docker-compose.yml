version: '3.9'
services:

  mssql:
    image: mcr.microsoft.com/mssql-tools
    env_file:
      - .env
    # command: sleep infinity

  mysql:
    image: mysql
    env_file:
      - .env
    ports:
      - "3306:3306"
    # command: sleep infinity

  pgsql:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    env_file:
      - .env
    # volumes:
    #   - '/tmp/tooling_notes_pgsql:/var/lib/postgresql/data'
    # command: sleep infinity

  mongo:
    image: public.ecr.aws/docker/library/mongo:latest
    ports:
      - "27017:27017"
    env_file:
      - .env
    # command: mongod
    # command: bash -c "echo 'alias mongo=\"mongo --host localhost --port 27017\"' >> ~/.bashrc && exec bash -c 'sleep infinity'"

  sqlite:
    image: keinos/sqlite3
    env_file:
      - .env
    ports:
      - "5433:5433"
    volumes:
      - './sqlite:/workspace'
    command: sleep infinity

  mariadb:
    image: mariadb:latest
    env_file:
      - .env
    volumes:
      - /tmp/mariadb-tooling_notes:/var/lib/mysql
    ports:
      - "3306:3306"

  cassandra:
    image: cassandra:latest
    ports:
      - "9042:9042"
    env_file:
      - .env
    environment:
      - MAX_HEAP_SIZE=256M
      - HEAP_NEWSIZE=128M
    # volumes:
    #   - ./data:/var/lib/cassandra

  neo4j:
    image: neo4j:latest
    env_file:
      - .env
    ports:
      - "7474:7474"
      - "7473:7473"
      - "7687:7687"
    # networks_tab: use this if proxy needed
    # networks:
    #   - proxy_net
    # volumes:
    #   - ./data:/data
    #   - ./logs:/logs
    #   - ./import:/var/lib/neo4j/import

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
    env_file:
      - .env
    ports:
      - "9200:9200"
    # volumes:
    #   - elasticsearch-data:/usr/share/elasticsearch/data

# used to attach to services to a different docker network. along with a networks_tab for each service
# NOTE: this could also be not needed if you use a host of "host.docker.internal" for your app that hits things outside of its own docker network
# as long as it has the port, it should be able to map it
# networks:
#   proxy_net:
#     external:
#       name: <other_docker_network_name>

